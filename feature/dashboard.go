package feature

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"konecta/model"
	"net/http"
	"strings"
)

func (f Feature) GetDashboardKonecta() (model.DashboardReponse, error) {
	data := model.DashboardReponse{}

	token, err := f.Auth()

	if err != nil {
		return data, nil
	}

	url := "https://mqjl9s6vf4.execute-api.eu-west-1.amazonaws.com/prod/v1/hackday/private/event"
	method := "GET"

	payload := strings.NewReader(``)

	client := &http.Client{}
	req, err := http.NewRequest(method, url, payload)

	if err != nil {
		fmt.Println(err)
		return data, err
	}

	a := fmt.Sprintf("Bearer %s", token.AccessToken)
	req.Header.Add("Accept", "application/json")
	req.Header.Add("Authorization", a)

	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return data, err
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println(err)
		return data, err
	}

	err = json.Unmarshal(body, &data)

	if err != nil {
		return data, err
	}

	event := model.AutoGenerated{}

	eventString := data.Payload.Data.OnCreateHackathonEvents.EventSring

	err = json.Unmarshal([]byte(eventString), &event)

	data.Payload.Data.OnCreateHackathonEvents.Event = event

	call, err := f.db.GetInfoDashboardDBByID(data.ID)

	if err != nil {
		return data, err
	}

	if len(call) > 0 {
		if call[0].ID == data.ID {
			return data, nil
		}
	}

	err = f.db.SaveInfo(data)

	if err != nil {
		return data, err
	}

	return data, nil
}

func (f Feature) GetInfoDashboardDBByID(id string) ([]model.DashboardReponse, error) {
	info, err := f.db.GetInfoDashboardDBByID(id)

	return info, err
}

func (f Feature) GetAgents() (model.ResponseAgents, error) {
	var metrics []model.MetricStruct

	infoComplete, _ := f.GetDashboardKonecta()

	var agentes []model.Agent

	agentsData := infoComplete.Payload.Data.OnCreateHackathonEvents.Event.Detail.Events[0].Detail.EventBody.Service.Users

	metricsData := infoComplete.Payload.Data.OnCreateHackathonEvents.Event.Detail.Events[0].Detail.EventBody.Data.Metrics

	for _, a := range agentsData {
		newAgente := model.Agent{
			ID:   a.ID,
			Name: a.Name,
		}

		agentes = append(agentes, newAgente)
	}

	for _, m := range metricsData {
		newMetric := model.MetricStruct{
			Metric: m.Metric,
			Users:  m.UsersID,
		}
		metrics = append(metrics, newMetric)

	}

	agentesWithStatus := f.getStatusAgents(agentes, metrics)

	response := model.ResponseAgents{
		Agents: agentesWithStatus,
	}

	return response, nil
}

func (f Feature) getStatusAgents(agents []model.Agent, metrics []model.MetricStruct) []model.Agent {
	var agentesWithStatus []model.Agent

	for _, agent := range agents {
		// for _, metric := range metrics.Metric {
		// 	if
		// }

		fmt.Println(agent)
	}

	return agentesWithStatus
}
